openapi: "3.0.0"
info:
  version: "0.2"
  title: "ERDRI.dor Query API Specification"
  description: >-
    "The ERDRI.dor query API is a web service for rare disease data sharing 
    that can be queried for information about specific rare disease data registries."
  #contact:
    #name: "Magic Mike"
    #email: "someone@erdri.dor"
  #license:
    #name: "Apache 2.0"
    #url: "http://www.apache.org/licenses/LICENSE-2.0.html"
externalDocs:
  description: "ERDRI.dor Website"
  url: "https://eu-rd-platform.jrc.ec.europa.eu/erdri-description_de"
paths:
  /: 
    get:
      description: "Get information about the API."
      operationId: "getInformation"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfoResponse"
        404:
          description: "not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /resource:
    get:
      description: "Return a list of all listed resources in the catalogue."
      operationId: "getAllResources"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DataResponse"
        400:
          description: Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /resource/search?:
    get:
      description: "Get response to a query for a certain rare disease (resources)."
      operationId: "getResourceSearch"
      parameters:
        - name: name
          description: "Reference name of the disease. 
          Accepting strings on a certain naming convention basis."
          in: query
          required: false
          schema:
            type: string
        - name: orphaCode
          description: "The orphacode of the disease."
          in: query
          required: false
          schema:
            type: string
        - name: skip
          description: Number of pages to skip
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          description: Size of the page
          in: query
          required: false
          schema: 
            type: integer 
            format: int32
            default: 10
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DataResponse"
        400:
          description: Bad request (e.g. missing mandatory parameter)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        401:
          description: >-
            Unauthorised (e.g. when an unauthenticated user tries to access a
            protected resource)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        403:
          description: >-
            Forbidden (e.g. the resource is protected for all users or the user
            is authenticated but s/he is not granted for this resource)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: "unexpected error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    InfoResponse:
      type: object
      required:
        - @id
        - @type
      properties:
        @id:
          description: A primary identifier for the catalog.
          type: string
          example: http://www.orpha.net"
        @type:
          description: The primary type for this catalog.
          type: string
          example: CatalogOfRegistries
        name:
          type: string
          description: Name of the API.
        description:
          type: string
          description: Description of the API.
        homepage:
          description: The homepage of the catalog.
          type: string
          example: http://www.orpha.net
        datasets:
          description: >-
            Resource(s) served by the API.
          minItems: 0
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        organization:
          $ref: "#/components/schemas/Organization"
        apiVersion:
          type: string
          description: Version of the API provided.
          example: v0.1
        #createDateTime:
          #type: string
          #description: The time the API was created (ISO 8601 format).
          #example: "2012-07-19 or 2017-01-17T20:33:40Z"
        #updateDateTime:
          #type: string
          #description: The time the API was last updated (ISO 8601 format).
          #example: "2012-07-19 or 2017-01-17T20:33:40Z"
        #sampleRequests:
          #description: >-
            #Examples of interesting queries, e.g. a few queries demonstrating
            #different responses.
          #type: array
          #items:
            #$ref: "#/components/schemas/DataRequest"
    ErrorResponse:
      type: "object"
      required: 
        - code 
        - message
      properties:
        code: 
          type: integer
          format: int32
        message: 
          type: string
    DataResponse:
      type: object
      required:
        - apiVersion
      properties:
        apiVersion:
          description: Version of the API. If specified, the value must match `apiVersion`
            in InfoResponse.
          type: string
        resourceResponses:
          description: The resource results.
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        page:
          $ref: "#/components/schemas/Page"
        error:
          $ref: "#/components/schemas/ErrorResponse"
    DataRequest:
      description: Request as interpreted by the API.
      type: object
      required:
        - orphaCode
      properties:
        orphaCode:
          description: "The orphacode of the disease."
          type: string
        referenceName:
          description: The reference name of the resource (disease name).
          type: string
        skip:
          description: Number of pages to skip
          type: integer
          format: int32
        limit:
          description: Size of the page
          type: integer 
          format: int32
          default: 10
    Resource:
      type: object
      required:
        - @id
        - @type
        - name
        - description
        - url
      properties:
        @id:
          type: string
          description: Unique identifier of the ressource.
        name:
          type: string
          description: Name of the resource.
        description:
          type: string
          description: Description of the resource.
        url:
          type: string
          description: >-
            URL to the ressource.
          example: "http://example.org/wiki/Main_Page"
        publisher:
          type: object
          description: The publishing organization of the resource.
          $ref: "#/components/schemas/Organization"
        @type:
          type: string
          description: The type of the resource.
          example: "Patient registry"
        createDateTime:
          type: string
          description: The time the resource was created (ISO 8601 format).
          example: "2012-07-29 or 2017-01-17T20:33:40Z"
        updateDateTime:
          type: string
          description: The time the resource was last updated (ISO 8601 format).
          example: "2012-07-19 or 2017-01-17T20:33:40Z"
        version:
          type: string
          description: Version of the ressource.
      #  datasets:
       #     type: Array
        #    items:
         #       type: string
    #Organization:
     # description: Organization owning the API/Resource.
      #type: object
      #required:
       # - name
      #properties:
       # @id:
        #  type: string
         # description: Unique identifier of the organization.
        #name:
         # type: string
         # description: Name of the organization.
        #description:
         # type: string
         # description: Description of the organization.
        #homepage:
         # type: string
         # description: URL of the website of the organization (RFC 3986 format).
        #location:
         # $ref: "#/components/schemas/Location"
   # Location:
    #  type: object
     # properties:
      #  @id:
       #   description: A unique identifier.
        #  type: string
        #city:
         #   description: The city of the location.
          #  type: string
        #country:
         # description: The country the location is in.
          #type: string
        #region:
         # description: The region the location is in.
         # type: string
    Page:
      type: object
      properties:
        totalNumbers:
          description: Total number of resources found
          type: integer
        totalPages:
          description: Total number of pages
        size:
          description: Number of resources for every page
          type: integer
        page:
          description: Number of the current page
          type: integer
